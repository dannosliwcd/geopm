#
#  Copyright (c) 2015 - 2024, Intel Corporation
#  SPDX-License-Identifier: BSD-3-Clause
#

name: C/C++ CI

on:
  push:
    branches:
      - dev
      - release-v3.0
  pull_request:
    branches:
      - dev
      - release-v3.0

permissions: read-all

concurrency:
  group: ci-${{ github.ref }}-${{ github.head_ref }}
  cancel-in-progress: true

jobs:
  precheck:
    name: "Pre-build checks"
    # Run linters and other low-cost checks that do not depend on being in a
    # particular configuration of the build matrix.
    runs-on: ubuntu-22.04
    steps:
    - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
    - uses: codespell-project/actions-codespell@94259cd8be02ad2903ba34a22d9c13de21a74461 # v2.0
  build_and_test:
    name: "test: ${{ matrix.config.name }} ${{ matrix.debug-flag }} libgeopmd:${{ matrix.service-asan-flag }} libgeopm:${{ matrix.base-asan-flag  }}"
    strategy:
      matrix:
        config:
        - {
          name: clang-15,
          cc: "clang-15", cxx: "clang++-15"
        }
        - {
          name: gcc-12,
          cc: "gcc-12", cxx: "g++-12"
        }
        debug-flag: ["enable-debug", "disable-debug"]
        service-asan-flag: ["disable-asan"]
        base-asan-flag: ["disable-asan"]
        include:
        - config: {name: clang-15, cc: "clang-15", cxx: "clang++-15"}
          debug-flag: "enable-debug"
          service-asan-flag: "enable-asan"
          base-asan-flag: "disable-asan"
        - config: {name: clang-15, cc: "clang-15", cxx: "clang++-15"}
          debug-flag: "enable-debug"
          service-asan-flag: "disable-asan"
          base-asan-flag: "enable-asan"
    uses: ./.github/workflows/build_libs.yml
    with:
      cc: ${{ matrix.config.cc }}
      cxx: ${{ matrix.config.cxx }}
      debug-flag: ${{ matrix.debug-flag }}
      libgeopmd-asan-flag: ${{ matrix.service-asan-flag }}
      libgeopm-asan-flag: ${{ matrix.base-asan-flag }}
  publish_obs:
    if: github.event_name == 'push'
    needs: build_and_test
    name: "publish_obs"
    runs-on: ubuntu-22.04
    env:
      CC: "gcc-12"
      CXX: "g++-12"
    steps:
    - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
      with:
        fetch-depth: 0
    - name: install system dependencies
      run: sudo apt-get update && sudo apt-get install libelf-dev mpich libmpich-dev libomp-15-dev libsystemd-dev liburing-dev python3-gi python3-yaml osc python3-m2crypto libcap-dev zlib1g-dev
    - name: install geopmpy and geopmdpy python dependencies
      run: |
           python3 -m pip install --upgrade pip setuptools wheel pep517
           python3 -m pip install -r geopmdpy/requirements.txt
    - name: configure libgeopmd dir
      working-directory: libgeopmd
      run: ./autogen.sh && ./configure || (cat config.log && false)
    - name: make libgeopmd dist
      working-directory: libgeopmd
      run: make -j2 dist
    - name: make libgeopmd libs
      working-directory: libgeopmd
      run: make -j2
    - name: configure libgeopm dir
      working-directory: libgeopm
      run: ./autogen.sh && ./configure --disable-openmp --disable-mpi || (cat config.log && false)
    - name: make libgeopm dist
      working-directory: libgeopm
      run: make -j2 dist
    - name: set OSC credentials
      run: |
           echo -e "[general]\n\n[https://api.opensuse.org]\ncredentials_mgr_class=osc.credentials.ObfuscatedConfigFileCredentialsManager" > ~/.oscrc
           echo "user = ${{ github.repository_owner }}" >> ~/.oscrc
           echo "pass = ${{ secrets.OSC_CREDENTIALS }}" >> ~/.oscrc
           if [[ "${{ github.ref_name }}" == "release-v3.0" ]]; then
               echo "SERVICE_PACKAGE=home:${{ github.repository_owner }}:release/geopm-service" >> ${GITHUB_ENV}
               echo "RUNTIME_PACKAGE=home:${{ github.repository_owner }}:release/geopm-runtime" >> ${GITHUB_ENV}
           else
               echo "SERVICE_PACKAGE=home:${{ github.repository_owner }}/geopm-service" >> ${GITHUB_ENV}
               echo "RUNTIME_PACKAGE=home:${{ github.repository_owner }}/geopm-runtime" >> ${GITHUB_ENV}
           fi
    - name: publish libgeopmd
      working-directory: libgeopmd
      run: |
           osc co ${SERVICE_PACKAGE}
           rm ${SERVICE_PACKAGE}/geopm-service*.tar.gz
           cp geopm-service.spec ${SERVICE_PACKAGE}
           cp geopm-service*.tar.gz ${SERVICE_PACKAGE}
           cd ${SERVICE_PACKAGE}
           osc addremove
           cd -
           osc ci -m "geopm service ${{ github.sha }}" ${SERVICE_PACKAGE}
    - name: publish runtime
      working-directory: libgeopm
      run: |
           osc co ${RUNTIME_PACKAGE}
           rm ${RUNTIME_PACKAGE}/geopm-runtime*.tar.gz
           cp geopm-runtime.spec ${RUNTIME_PACKAGE}
           cp geopm-runtime*.tar.gz ${RUNTIME_PACKAGE}
           cd ${RUNTIME_PACKAGE}
           osc addremove
           cd -
           osc ci -m "geopm runtime ${{ github.sha }}" ${RUNTIME_PACKAGE}
